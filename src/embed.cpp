#include <string>
#include <cctype>
#include <iostream>
#include <fstream>
#include <string>
#include <iomanip>

using std::string;

// TODO: option for capitalization; possibly (many?) others

static string
fileToVariableName(string filename)
{
    using std::isalpha;
    using std::isalnum;

    // Strip parent directories
    auto i = filename.find_last_of("\\/");
    if (i != string::npos) filename = filename.substr(i + 1);

    // Strip extension
    i = filename.find_last_of(".");
    if (i != string::npos) filename = filename.substr(0, i);

    string name;
    auto ch = filename[0];
    name += isalpha(ch) ? ch : '_';
    for (auto ch: filename.substr(1)) name += std::isalnum(ch) ? ch : '_';

    return name;
}

int main(int argc, char *argv[])
{
	using namespace std;

	try {

        cout << "GPCEmbed" << endl;

        string data_file, source_file, header_file;
        string const_name;

        // TODO: handle quotation marks

        for (int i = 1; i < argc; i++) {

            string arg(argv[i]);

            // Options
            if (arg == "-w") {
                i++;
                if (i >= argc) throw std::runtime_error("-w must be followed by path of wrapper file to be generated");
                source_file = argv[i];
            }
            else if (arg.substr(0, 9) == "--source=") {
                source_file = arg.substr(9);
            }
            else if (arg == "-h") {
                i ++;
                if (i >= argc) throw std::runtime_error("-i must be followed by path of import header file to be generated");
                header_file = argv[i];
            }
            else if (arg.substr(0, 9) == "--header=") {
                header_file = arg.substr(9);
            }

            // Positional arguments
            else if (data_file.empty()) {
                data_file = arg;
            }
        }

        // Check required parameters
        if (data_file.empty()) throw std::runtime_error("No data file specified!");

        // TODO: support indicating directories and automatically appending filenames ?

        // If neither wrapper nor import header file were specified, derive both of them
        if (source_file.empty() && header_file.empty()) {
            source_file = data_file + ".c";
            header_file  = data_file + ".h";
        }

        // TODO: set default values of overridable derived parameters
        if (const_name.empty()) const_name = fileToVariableName(data_file);

        // Summary
        cout << "Data file path:          " << data_file << endl;
        cout << "Source file path:        " << source_file << endl;
        cout << "Import header file path: " << header_file << endl;
        cout << "Constant object name:    " << const_name << endl;

        ifstream data_fs;

        data_fs.open(data_file, ios::binary);
        if (!data_fs.good()) throw std::runtime_error(std::string("Failed to open data file: ") + strerror(errno));
        data_fs.seekg(0, ios::end);
        std::streamoff size = data_fs.tellg();
        data_fs.seekg(0);

        // Generate source file
        if (!source_file.empty()) {
            ofstream source_fs;
            source_fs.open(source_file);
            if (!source_fs.good()) throw std::runtime_error(std::string("Failed to open source file for writing: ") + strerror(errno));
            source_fs << "// Generated by GPCEmbed. Do not edit this file." << endl;
            source_fs << "const unsigned char " << const_name << "[" << size << "] = {" << endl;
            std::streamoff n = 0;
            while (true) {
                char ch;
                data_fs.get(ch);
                if (data_fs.eof()) break;
                if (n > 0) {
                    source_fs << ", ";
                    if (n % 16 == 0) source_fs << endl;
                }
                source_fs << "0x" << hex << setw(2) << setfill('0') << (unsigned int) ch;
                n ++;
            }
            source_fs << endl;
            source_fs << "};" << endl;
            source_fs.close();
            if (size != n) throw std::runtime_error("Size of data file has changed during source file generation!");
        }

        // Generate import header file
        if (!header_file.empty()) {
            ofstream header_fs;
            header_fs.open(header_file);
            if (!header_fs.good()) throw std::runtime_error(std::string("Failed to open header file for writing: ") + strerror(errno));
            header_fs << "// Generated by GPCEmbed. Do not edit this file." << endl;
            header_fs << "#pragma once" << endl;
            header_fs << "#ifdef __cplusplus" << endl;
            header_fs << "extern \"C\" {" << endl;
            header_fs << "#endif" << endl;
            header_fs << "extern const unsigned char " << const_name << "[" << size << "];" << endl;
            header_fs << "#ifdef __cplusplus" << endl;
            header_fs << "} // extern \"C\"" << endl;
            header_fs << "#endif" << endl;
            header_fs.close();
        }

        return 0;
    }
    catch (const exception &e) {
        cerr << "Error: " << e.what() << endl;
    }

	/*
	cout << endl;
	cout << "Press RETURN to terminate" << endl;
	cin.ignore();
	*/

	return -1;
}